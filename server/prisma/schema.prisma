// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["interactiveTransactions"]
}

//https://dev.to/sabinthedev/building-a-prisma-schema-61b

// generator erd {
//   provider = "prisma-erd-generator"
//   output = "./ERD.svg"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  MANAGER
  EMPLOYEE
  CLIENT
  PERSONALTRAINER
  UNKNOW
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  birth_date DateTime @db.Date
  role       Roles    @default(UNKNOW)
  phone      String
  CNI        String?
  NIF        String?
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  refresh_token RefreshToken?

  client            Client[]
  personal_trainers PersonalTrainer[]
  employee          Employee[]
  manager           Manager?

  @@map("users")
}



model RefreshToken{
  id String @id @default(uuid())
  expiresIn Int
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("refresh_token")
}


model Client {
  id      String                 @id @default(uuid())
  user_id String
  user    User                   @relation(fields: [user_id], references: [id])
  // status Status
  cpt     ClientPersonalTrainer?
  ctp     ClientTrainingPlan?
  cd      ClientDiscount?
  pay     Payment[]

  @@map("clients")
}

model Training_plan {
  id          String   @id @default(uuid())
  name        String
  description String
  value       Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  ctp ClientTrainingPlan[]

  @@map("training_plans")
}

model Discount {
  id          String   @id @default(uuid())
  name        String
  description String   @default("")
  value       Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  cd ClientDiscount[]

  @@map("discounts")
}

model PersonalTrainer {
  id      String @id @default(uuid())
  user_id String
  value   Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  cpt ClientPersonalTrainer[]

  @@map("personal_trainers")
}

model Employee {
  id      String @id @default(uuid())
  user_id String
  status  Status @default(INACTIVE)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("employees")
}

model Manager {
  id      String @id @default(uuid())
  user_id String @unique


  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("manager")
}

model ClientPersonalTrainer {
  id                  Int              @id @default(autoincrement())
  client_id           String           @unique
  client              Client           @relation(fields: [client_id], references: [id])
  personal_trainer_id String           
  personalTrainer     PersonalTrainer? @relation(fields: [personal_trainer_id], references: [id], onUpdate: Cascade, onDelete: NoAction)

  // created_at DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // @@id([client_id,personal_trainer_id])

  @@map("client_personal_trainer")
}

model ClientTrainingPlan {
  id               Int            @id @default(autoincrement())
  client_id        String         @unique
  client           Client         @relation(fields: [client_id], references: [id])
  training_plan_id String         
  train            Training_plan? @relation(fields: [training_plan_id], references: [id], onUpdate: Cascade, onDelete: NoAction)

  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  // @@id([client_id,training_plan_id])
  @@map("client_training_plan")
}

model ClientDiscount {
  id          Int       @id @default(autoincrement())
  client_id   String    @unique
  client      Client    @relation(fields: [client_id], references: [id])
  discount_id String    
  discount    Discount? @relation(fields: [discount_id], references: [id], onUpdate: Cascade, onDelete: NoAction)

  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  // @@id([])
  @@map("client_discount")
}

model Payment {
  id                     String  @id @default(uuid())
  client_id                String
  client                 Client  @relation(fields: [client_id], references: [id])
  training_plan_name     String?
  training_plan_value    Float   @default(0.0)
  discount_name          String?
  discount_value         Float   @default(0.0)
  personal_trainer_name  String?
  personal_trainer_value Float   @default(0.0)


  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  @@map("payments")
}
